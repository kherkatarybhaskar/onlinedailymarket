{"version":3,"sources":["components/AccountControl/UserInfo/UserInfo.css","components/AccountControl/UserInfo/UserInfo.js"],"names":["module","exports","connect","state","token","auth","userId","name","userInfo","email","phoneNo","authenticated","fetched","loading","error","dispatch","onSetUserInfo","userData","actions","props","useState","elementType","elementConfig","type","placeholder","label","value","validation","required","valid","touched","isEmail","minLength","maxLength","isNumeric","userInfoForm","setUserInfoForm","formIsValid","setFormIsValid","formElementsArray","key","push","id","config","form","onSubmit","event","preventDefault","formData","formElementIdentifier","console","log","userdata","map","formElement","invalid","shouldValidate","changed","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedUserInfoForm","inputChangedHandler","className","classes","Button","disabled","loadingMessage","formWarning","UserInfo","FormHolder"],"mappings":"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","file":"static/js/3.1b853be2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"UserInfo\":\"UserInfo__UserInfo___2sMyL\",\"FormHolder\":\"UserInfo__FormHolder___3sW45\",\"Button\":\"UserInfo__Button___35QRk\"};","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport classes from './UserInfo.css';\nimport Input from '../../UI/Input/Input';\nimport { updateObject, checkValidity } from '../../../shared/utility';\nimport * as actions from '../../../store/actions/index';\n\nconst UserInfo = props => {\n\n    const [userInfoForm, setUserInfoForm] = useState({\n        name: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'User Name',\n                label: 'User Name'\n            },\n            value: props.name,\n            validation: {\n                required: true\n            },\n            valid: false,\n            touched: false\n        },\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'user-email@gmail.com',\n                label: 'Your E-Mail'\n            },\n            value: props.email,\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        phoneNo: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: '9876543210',\n                label: 'Contact Number'\n            },\n            value: props.phoneNo,\n            validation: {\n                required: true,\n                minLength: 10,\n                maxLength: 10,\n                isNumeric: true\n            },\n            valid: false,\n            touched: false\n        },\n    });\n    \n    // const [ emailAddress, setEmailAddress ] = useState(\"\");\n    // let tempoName = props.name;\n    // let tempoEmail = null;\n    // let tempoPhoneNo = null;\n    // console.log(\"tempoName set :\"+tempoName);\n    \n    const [formIsValid, setFormIsValid] = useState(false);\n    \n    const userInfoUpdateHandler = ( event ) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in userInfoForm) {\n            formData[formElementIdentifier] = userInfoForm[formElementIdentifier].value;\n        }\n\n        console.log(\"formData : \"+formData);\n        const userInfo = {\n            userdata: formData,\n            userId: props.userId\n        }   \n        props.onSetUserInfo(userInfo, props.token, props.userId);\n    }\n\n    const inputChangedHandler = (event, inputIdentifier) => {\n        const updatedFormElement = updateObject(userInfoForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, userInfoForm[inputIdentifier].validation),\n            touched: true,\n        });\n        // tempoName = event.target.value;\n        // console.log(tempoName);\n        const updatedUserInfoForm = updateObject(userInfoForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedUserInfoForm) {\n            formIsValid = updatedUserInfoForm[inputIdentifier].valid && formIsValid;\n        }\n        setUserInfoForm(updatedUserInfoForm);\n        setFormIsValid(formIsValid);\n\n    }\n\n    const formElementsArray = [];\n    for (let key in userInfoForm) {\n        formElementsArray.push({\n            id: key,\n            config: userInfoForm[key]\n        });\n    }\n\n    let form = (\n        <form onSubmit={userInfoUpdateHandler}>\n            {formElementsArray.map(formElement => (\n                <Input \n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    shouldValidate={formElement.config.validation}\n                    touched={formElement.config.touched}\n                    label={formElement.config.elementConfig.label}\n                    changed={(event) => inputChangedHandler(event, formElement.id)} \n                />\n            ))}\n            <div className={classes.Button}>\n                <button \n                    disabled={!formIsValid}>UPDATE</button>\n            </div>\n        </form>\n    );\n\n    // console.log('props.loading : '+props.loading);\n\n    let loadingMessage = null;\n\n    if(props.loading){\n       form = null;\n       loadingMessage = <h2>LOADING...PLEASE WAIT</h2>;\n    }\n    \n    let formWarning = (userInfoForm['name'].value && userInfoForm['email'].value && userInfoForm['phoneNo'].value) ;\n    if(props.error){\n        formWarning = !null; \n    }\n\n    return (\n        <div className={classes.UserInfo}>\n            { !formWarning ? <h4>Go to previous page and revisit to load user info</h4> : null}\n            { (props.error!=null && props.fetched===false) ? <h4>{props.error}</h4> :null}\n            <div className={classes.FormHolder}>\n                {form}\n            </div>\n            {loadingMessage}\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    return {\n        token: state.auth.token,\n        userId: state.auth.userId,\n        name: state.userInfo.name,\n        email: state.userInfo.email,\n        phoneNo: state.userInfo.phoneNo,\n        authenticated: state.auth.authenticated,\n        fetched: state.userInfo.fetched,\n        loading: state.userInfo.loading,\n        error: state.userInfo.error\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSetUserInfo: (userData, token, userId) => dispatch(actions.setUserInfo(userData,token,userId)),\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(UserInfo);"],"sourceRoot":""}